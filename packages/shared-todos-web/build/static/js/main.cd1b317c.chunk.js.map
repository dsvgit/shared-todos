{"version":3,"sources":["services/auth/index.js","services/lists/index.js","store/reducer.js","store/index.js","config.js","firebase-config.js","pages/SignInPage/index.js","components/AppLayout/index.js","hooks/useDialog.js","pages/ListsOverviewPage/index.js","pages/TodosPage/index.js","pages/Routing.js","FetchProvider.js","App.js","index.js"],"names":["getModuleState","state","auth","selectors","isAuthenticated","accessToken","userProfile","slice","createSlice","name","initialState","reducers","login","payload","email","logout","actions","reducer","persistReducer","key","storage","lists","listsIds","entities","map","id","listId","Object","values","todos","filter","todo","addList","item","push","removeList","index","indexOf","splice","addTodo","isDone","toggleTodo","combinedRootReducer","combineReducers","authReducer","listsReducer","rootReducer","action","type","authActions","toString","undefined","localStorage","removeItem","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","config","apiHost","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","googleAuthProvider","GoogleAuthProvider","SignInPage","dispatch","useDispatch","a","signInWithPopup","result","user","additionalUserInfo","profile","credential","console","log","error","onClick","AppLayout","children","title","useSelector","authSelectors","width","height","src","picture","alt","useDialog","resolveRef","useRef","useState","isOpen","setIsOpen","initialData","setInitialData","Promise","resolve","current","open","close","CreateListDialog","setTitle","value","onChange","e","target","ListsOverviewPage","listsSelectors","createDialog","listsActions","shortid","generate","to","handleRemove","CreateTodoDialog","TodosPage","useParams","list","checked","LoginRouting","path","AppRouting","exact","Routing","FetchProvider","props","fetchOptions","interceptors","request","options","url","route","headers","response","res","App","loading","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd1b317c.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst getModuleState = state => state.auth;\n\nexport const selectors = {\n  isAuthenticated(state) {\n    const { isAuthenticated } = getModuleState(state);\n    return isAuthenticated;\n  },\n  getAccessToken(state) {\n    const { accessToken } = getModuleState(state);\n    return accessToken;\n  },\n  getUserProfile(state) {\n    const { userProfile } = getModuleState(state);\n    return userProfile;\n  }\n};\n\nconst slice = createSlice({\n  name: \"auth\",\n  initialState: {\n    isAuthenticated: false,\n    accessToken: null,\n    userProfile: {}\n  },\n  reducers: {\n    login(state, { payload }) {\n      const { email, userProfile, accessToken } = payload;\n\n      state.isAuthenticated = true;\n      state.accessToken = accessToken;\n      state.userProfile = { ...userProfile }; // should be a plain object\n      state.userProfile.email = email;\n    },\n    logout() {\n      // just to generate action creator, see rootReducer - it resets the whole state\n    }\n  }\n});\n\nexport const actions = slice.actions;\nexport const reducer = persistReducer(\n  {\n    key: \"auth\",\n    storage\n  },\n  slice.reducer\n);\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst getModuleState = (state) => state.lists;\n\nexport const selectors = {\n  getLists(state) {\n    const { listsIds, entities } = getModuleState(state);\n    const lists = listsIds.map((id) => entities.lists[id]);\n\n    return lists;\n  },\n  getList(state, listId) {\n    const { entities } = getModuleState(state);\n    const list = entities.lists[listId];\n\n    return list;\n  },\n  getTodos(state, listId) {\n    const { entities } = getModuleState(state);\n    const todos = Object.values(entities.todos).filter(\n      (todo) => todo.listId === listId\n    );\n\n    return todos;\n  },\n};\n\nconst slice = createSlice({\n  name: \"lists\",\n  initialState: {\n    entities: {\n      lists: {},\n      todos: {},\n    },\n    listsIds: [],\n  },\n  reducers: {\n    addList(state, { payload }) {\n      const item = payload;\n\n      state.listsIds.push(item.id);\n      state.entities.lists[item.id] = item;\n    },\n    removeList(state, { payload }) {\n      const id = payload;\n\n      delete state.entities[id];\n\n      const index = state.listsIds.indexOf(id);\n      if (index > -1) {\n        state.listsIds.splice(index, 1);\n      }\n    },\n    addTodo(state, { payload }) {\n      const item = payload;\n\n      state.entities.todos[item.id] = { ...item, isDone: false };\n    },\n    toggleTodo(state, { payload }) {\n      const id = payload;\n\n      state.entities.todos[id].isDone = !state.entities.todos[id].isDone;\n    },\n  },\n});\n\nexport const actions = slice.actions;\nexport const reducer = persistReducer(\n  {\n    key: \"lists\",\n    storage,\n  },\n  slice.reducer\n);\n","import { combineReducers } from \"redux\";\n\nimport {\n  actions as authActions,\n  reducer as authReducer,\n} from \"../services/auth\";\nimport { reducer as listsReducer } from \"../services/lists\";\n\nconst combinedRootReducer = combineReducers({\n  auth: authReducer,\n  lists: listsReducer,\n});\n\nfunction rootReducer(state, action) {\n  if (action.type === authActions.logout.toString()) {\n    state = undefined;\n    localStorage.removeItem(\"persist:auth\");\n    localStorage.removeItem(\"persist:lists\");\n  }\n\n  return combinedRootReducer(state, action);\n}\n\nexport default rootReducer;\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport {\n  persistStore,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\n\nimport reducer from \"./reducer\";\n\nconst store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  devTools: process.env.NODE_ENV !== \"production\",\n});\n\nexport const persistor = persistStore(store);\nexport default store;\n","const config = {\n  apiHost: process.env.REACT_APP_API_HOST,\n\n  firebaseConfig: {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  },\n};\n\nexport default config;\n","import { initializeApp, auth } from \"firebase\";\nimport \"firebase/auth\";\n\nimport config from \"./config\";\n\ninitializeApp(config.firebaseConfig);\n\nexport const googleAuthProvider = new auth.GoogleAuthProvider();\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { auth } from \"firebase/app\";\n\nimport { googleAuthProvider } from \"firebase-config\";\nimport { actions as authActions } from \"services/auth\";\n\nfunction SignInPage() {\n  const dispatch = useDispatch();\n\n  async function signInWithGoogle() {\n    try {\n      const result = await auth().signInWithPopup(googleAuthProvider);\n\n      dispatch(\n        authActions.login({\n          email: result.user.email,\n          userProfile: result.additionalUserInfo.profile,\n          accessToken: result.credential.accessToken\n        })\n      );\n\n      console.log(result);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <div>\n      <button onClick={signInWithGoogle}>sign up with google</button>\n    </div>\n  );\n}\n\nexport default SignInPage;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport {\n  selectors as authSelectors,\n  actions as authActions,\n} from \"services/auth\";\n\nfunction AppLayout({ children, title }) {\n  const dispatch = useDispatch();\n  const userProfile = useSelector(authSelectors.getUserProfile);\n\n  function logout() {\n    dispatch(authActions.logout());\n  }\n\n  return (\n    <div>\n      <div>\n        <div>{userProfile.name}</div>\n        <img width={48} height={48} src={userProfile.picture} alt=\"\" />\n        <button onClick={logout}>logout</button>\n      </div>\n      {title && <div><strong>{title}</strong></div>}\n      <div>{children}</div>\n    </div>\n  );\n}\n\nexport default AppLayout;\n","import { useRef, useState } from \"react\";\n\nfunction useDialog() {\n  const resolveRef = useRef(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const [initialData, setInitialData] = useState(null);\n\n  async function open(initialData) {\n    setInitialData(initialData);\n    setIsOpen(true);\n    return new Promise((resolve) => {\n      resolveRef.current = resolve;\n    });\n  }\n\n  function close(payload) {\n    setInitialData(null);\n    setIsOpen(false);\n    resolveRef.current && resolveRef.current(payload);\n  }\n\n  return { isOpen, initialData, open, close };\n}\n\nexport default useDialog;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport shortid from \"shortid\";\n\nimport {\n  selectors as listsSelectors,\n  actions as listsActions,\n} from \"services/lists\";\nimport AppLayout from \"components/AppLayout\";\nimport useDialog from \"hooks/useDialog\";\n\nfunction CreateListDialog({ close }) {\n  const [title, setTitle] = useState(\"\");\n\n  return (\n    <div>\n      <div>\n        <input\n          type=\"text\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n      </div>\n      <div>\n        <button onClick={() => close({ title })}>create</button>\n        <button onClick={() => close()}>close</button>\n      </div>\n    </div>\n  );\n}\n\nfunction ListsOverviewPage() {\n  const dispatch = useDispatch();\n  const lists = useSelector(listsSelectors.getLists);\n  const createDialog = useDialog();\n\n  async function handleOpenCreateDialog() {\n    const result = await createDialog.open();\n\n    if (!result) return;\n\n    dispatch(\n      listsActions.addList({ id: shortid.generate(), title: result.title })\n    );\n  }\n\n  async function handleRemove(id) {\n    dispatch(listsActions.removeList(id));\n  }\n\n  return (\n    <AppLayout title=\"lists overview\">\n      <button onClick={handleOpenCreateDialog}>create list</button>\n      <div>\n        {lists.map((item) => (\n          <div key={item.id}>\n            <span>{item.id}</span> <Link to={`/${item.id}`}>{item.title}</Link>\n            <button onClick={() => handleRemove(item.id)}>remove</button>\n          </div>\n        ))}\n      </div>\n      {createDialog.isOpen && <CreateListDialog {...createDialog} />}\n    </AppLayout>\n  );\n}\n\nexport default ListsOverviewPage;\n","import React, { useState } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport shortid from \"shortid\";\n\nimport AppLayout from \"components/AppLayout\";\nimport {\n  selectors as listsSelectors,\n  actions as listsActions,\n} from \"services/lists\";\nimport useDialog from \"hooks/useDialog\";\n\nfunction CreateTodoDialog({ close }) {\n  const [title, setTitle] = useState(\"\");\n\n  return (\n    <div>\n      <div>\n        <input\n          type=\"text\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n      </div>\n      <div>\n        <button onClick={() => close({ title })}>create</button>\n        <button onClick={() => close()}>close</button>\n      </div>\n    </div>\n  );\n}\n\nfunction TodosPage() {\n  const { listId } = useParams();\n\n  const dispatch = useDispatch();\n  const list = useSelector((state) => listsSelectors.getList(state, listId));\n  const todos = useSelector((state) => listsSelectors.getTodos(state, listId));\n\n  const createDialog = useDialog();\n\n  async function handleOpenCreateDialog() {\n    const result = await createDialog.open();\n\n    if (!result) return;\n\n    dispatch(\n      listsActions.addTodo({\n        listId,\n        id: shortid.generate(),\n        title: result.title,\n      })\n    );\n  }\n\n  function handleToggleTodo(id) {\n    dispatch(listsActions.toggleTodo(id));\n  }\n\n  return (\n    <AppLayout title=\"todos\">\n      <Link to=\"/\">{\"<--\"} back</Link>\n      <div>{list.title}</div>\n      <button onClick={handleOpenCreateDialog}>create todo</button>\n      <div>\n        {todos.map((todo) => (\n          <div key={todo.id}>\n            <input\n              type=\"checkbox\"\n              checked={todo.isDone}\n              onChange={() => handleToggleTodo(todo.id)}\n            />\n            <span>{todo.id}</span> <span>{todo.title}</span>\n          </div>\n        ))}\n      </div>\n      {createDialog.isOpen && <CreateTodoDialog {...createDialog} />}\n    </AppLayout>\n  );\n}\n\nexport default TodosPage;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { selectors } from \"services/auth\";\n\nimport SignInPage from \"./SignInPage\";\nimport ListsOverviewPage from \"./ListsOverviewPage\";\nimport TodosPage from \"./TodosPage\";\n\nfunction LoginRouting() {\n  return (\n    <Switch>\n      <Route path=\"/\">\n        <SignInPage />\n      </Route>\n    </Switch>\n  );\n}\n\nfunction AppRouting() {\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <ListsOverviewPage />\n      </Route>\n      <Route exact path=\"/:listId\">\n        <TodosPage />\n      </Route>\n    </Switch>\n  );\n}\n\nfunction Routing() {\n  const isAuthenticated = useSelector(selectors.isAuthenticated);\n\n  return <Router>{isAuthenticated ? <AppRouting /> : <LoginRouting />}</Router>;\n}\n\nexport default Routing;\n","import React from \"react\";\nimport { Provider } from \"use-http\";\nimport { useSelector } from \"react-redux\";\n\nimport { selectors as authSelectors } from \"./services/auth\";\nimport config from \"./config\";\n\nexport const FetchProvider = (props) => {\n  const accessToken = useSelector(authSelectors.getAccessToken);\n\n  const fetchOptions = {\n    interceptors: {\n      request: async ({ options, url, path, route }) => {\n        options.headers[\"Content-Type\"] = `application/json`;\n        options.headers[\"Authorization\"] = accessToken;\n        return options;\n      },\n      response: async ({ response }) => {\n        const res = response;\n        return res;\n      },\n    },\n  };\n\n  return <Provider url={config.apiHost} options={fetchOptions} {...props} />;\n};\n","import React from \"react\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport store, { persistor } from \"./store\";\nimport Routing from \"./pages/Routing\";\nimport { FetchProvider } from \"FetchProvider\";\n\nexport default function App() {\n  return (\n    <ReduxProvider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <FetchProvider>\n          <Routing />\n        </FetchProvider>\n      </PersistGate>\n    </ReduxProvider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}